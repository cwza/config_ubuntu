{
    "Basic Competitive Programming Template": {
        "prefix": "cp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#ifdef DEBUG",
            "    #include \"./tool/debug.hpp\"",
            "#else",
            "    #define dbg(...)",
            "    #define dbgarr(a)",
            "#endif",
            "using ll = long long;",
            "",
            "",
            "void solve() {",
            "    $0",
            "}",
            " ",
            "bool multi = 1;",
            "int main() {",
            "    ios_base::sync_with_stdio(0);",
            "    cin.tie(0);",
            " ",
            "    int t = 1;",
            "    if (multi)",
            "        cin >> t;",
            "    for (int i = 0; i < t; i++) {",
            "        solve();",
            "    }",
            "}",
            ""
        ],
        "description": "Basic Competitive Programming Template"
    },
    "Dijkstra Template": {
        "prefix": "dijkstra",
        "body": [
            "const ll INF = 1e18;",
            "auto dijkstra = [&](int src, vector<ll> &dist) -> void {",
            "    priority_queue<pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>>> pq; // d, u",
            "    dist[src] = 0;",
            "    pq.push({0, src});",
            "    while(pq.size()) {",
            "        auto [d, u] = pq.top();",
            "        pq.pop();",
            "        if(d > dist[u]) continue;",
            "        for(auto [v, w] : adj[u]) {",
            "            if(dist[u] + w < dist[v]) {",
            "                dist[v] = dist[u] + w;",
            "                pq.push({dist[v], v});",
            "            }",
            "        }",
            "    }",
            "};",
            "vector<ll> dist1(n, INF);",
            "dijkstra(0, dist1);",
            ""
        ],
        "description": "Dijkstra Template"
    },
    "Floyd-Warshal Template": {
        "prefix": "floyd warshal",
        "body": [
            "vector<vector<ll>> dist(n, vector<ll>(n, INF))",
            "for(int i = 0; i < n; i++) d[i][i] = 0;",
            "for(int i = 0; i < m; i++) {",
            "    int u, v, w;",
            "    cin >> u >> v >> w;",
            "    u--; v--;",
            "    dist[u][v] = min(dist[u][v], ll(w));",
            "    dist[v][u] = min(dist[v][u], ll(w));",
            "}",
            " ",
            "for(int k = 0; k < n; k++) {",
            "    for(int u = 0; u < n; u++) {",
            "        for(int v = 0; v < n; v++) {",
            "            if(dist[u][k] + dist[k][v] < dist[u][v]) {",
            "                dist[u][v] = dist[u][k] + dist[k][v];",
            "            }",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "Floyd-Warshal Template"
    },
    "Generate Large Random Number": {
        "prefix": "random",
        "body": [
            "/** @return a random integer between 0 and INT64_MAX */",
            "long long rng() {",
            "	static std::mt19937 gen(",
            "	    std::chrono::steady_clock::now().time_since_epoch().count());",
            "	return std::uniform_int_distribution<long long>(0, INT64_MAX)(gen);",
            "}",
            ""
        ],
        "description": "Generate Large Random Number"
    },
    "Fast Power": {
        "prefix": "fpow",
        "body": [
            "long long fpow(long long a, long long b, long long modN) {",
            "    long long res = 1;",
            "    while(b) {",
            "        if(b%2) res = res*a%modN;",
            "        a = a*a%modN;",
            "        b /= 2;",
            "    }",
            "    return res;",
            "}",
            ""
        ],
        "description": "Fast Power"
    },
    "Sparse Table Template": {
        "prefix": "sparse table",
        "body": [
            "struct SparseTable {",
            "    vector<vector<int>> sparse;",
            "    SparseTable(vector<int> &inp) {",
            "        int n = inp.size();",
            "        int logn = 1;",
            "        for(int i = 2; i < n; i*=2) logn++;",
            "        sparse.resize(n, vector<int>(logn+1));",
            "        for(int j = 0; j <= logn; j++) {",
            "            for(int i = 0; i+(1<<j)-1 < n; i++) {",
            "                if(j==0) sparse[i][0] = inp[i];",
            "                else {",
            "                    sparse[i][j] = min(sparse[i][j-1], sparse[i+(1<<(j-1))][j-1]); // change me",
            "                }",
            "            }",
            "        }",
            "    }",
            "    int query(int l, int r) {",
            "        int k = 31 - __builtin_clz(r-l+1);",
            "        return min(sparse[l][k], sparse[r-(1<<k)+1][k]); // change me",
            "    }",
            "};",
            ""
        ],
        "description": "Sparse Table Template"
    }
}
