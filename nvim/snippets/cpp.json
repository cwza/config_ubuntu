{
    "Basic Competitive Programming Template": {
        "prefix": "cp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#ifdef DEBUG",
            "    #include \"debug.hpp\"",
            "#else",
            "    #define dbg(...)",
            "#endif",
            "using ll = long long;",
            "",
            "",
            "void solve() {",
            "    $0",
            "}",
            " ",
            "bool multi = 1;",
            "int main() {",
            "    ios_base::sync_with_stdio(0);",
            "    cin.tie(0);",
            " ",
            "    int t = 1;",
            "    if (multi)",
            "        cin >> t;",
            "    for (int i = 0; i < t; i++) {",
            "        solve();",
            "    }",
            "}",
            ""
        ],
        "description": "Basic Competitive Programming Template"
    },
    "Dijkstra Template": {
        "prefix": "dijkstra",
        "body": [
            "vector<ll> dist(n, INF);",
            "priority_queue<pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>>> pq; // d, u",
            "dist[0] = 0;",
            "pq.push({0, 0});",
            "while(pq.size()) {",
            "    auto [d, u] = pq.top();",
            "    pq.pop();",
            "    if(d > dist[u]) continue;",
            "    for(auto [v, w] : adj[u]) {",
            "        if(dist[u] + w < dist[v]) {",
            "            dist[v] = dist[u] + w;",
            "            pq.push({dist[v], v});",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "Dijkstra Template"
    },
    "Floyd-Warshal Template": {
        "prefix": "floyd warshal",
        "body": [
            "vector<vector<ll>> dist(n, vector<ll>(n, INF))",
            "for(int i = 0; i < n; i++) d[i][i] = 0;",
            "for(int i = 0; i < m; i++) {",
            "    int u, v, w;",
            "    cin >> u >> v >> w;",
            "    u--; v--;",
            "    dist[u][v] = min(dist[u][v], ll(w));",
            "    dist[v][u] = min(dist[v][u], ll(w));",
            "}",
            " ",
            "for(int k = 0; k < n; k++) {",
            "    for(int u = 0; u < n; u++) {",
            "        for(int v = 0; v < n; v++) {",
            "            if(dist[u][k] + dist[k][v] < dist[u][v]) {",
            "                dist[u][v] = dist[u][k] + dist[k][v];",
            "            }",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "Floyd-Warshal Template"
    }
}
